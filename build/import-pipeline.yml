# DESCRIPTION: 	
# Builds, tests, and packages the solution for all PR requests.	

trigger: none

variables:
- template: pr-variables.yml
- template: build-variables.yml

stages:
- stage: UpdateVersion
  displayName: 'Determine Semver'
  dependsOn: []
  jobs:
  - job: Semver
    pool:
      name: '$(DefaultLinuxPool)'
      vmImage: '$(LinuxVmImage)'
    steps:
    - template: ./jobs/update-semver.yml  
    - powershell: |

        $buildNumber = "$(semVer)".replace(".", "").replace("-", "")
        $buildNumber = $buildNumber.subString(0, [System.Math]::Min(15, $buildNumber.Length))

        Write-Host "##vso[build.updatebuildnumber]$buildNumber" 
        Write-Host "Updated  build number to '$buildNumber"
      name: SetBuildVersion

- stage: BuildUnitTests
  displayName: 'Build and run unit tests'
  dependsOn:
  - UpdateVersion
  variables:
    assemblySemVer: $[stageDependencies.UpdateVersion.Semver.outputs['SetVariablesFromGitVersion.assemblySemVer']]
    assemblySemFileVer: $[stageDependencies.UpdateVersion.Semver.outputs['SetVariablesFromGitVersion.assemblySemFileVer']]
    informationalVersion: $[stageDependencies.UpdateVersion.Semver.outputs['SetVariablesFromGitVersion.informationalVersion']]
    majorMinorPatch: $[stageDependencies.UpdateVersion.Semver.outputs['SetVariablesFromGitVersion.majorMinorPatch']]
    nuGetVersion: $[stageDependencies.UpdateVersion.Semver.outputs['SetVariablesFromGitVersion.nuGetVersion']]
  jobs:
  - job: Windows
    pool:
      vmImage: $(WindowsVmImage)
    steps:
    - template: ./jobs/build.yml
      parameters:
        packageArtifacts: false

  - job: Linux
    pool:
      name: '$(DefaultLinuxPool)'
      vmImage: '$(LinuxVmImage)'
    steps:
    - template: ./jobs/build.yml
    

- stage: DockerBuild  
  displayName: 'Build images'
  dependsOn:
  - UpdateVersion
  jobs:
  - template: ./jobs/docker-build-all.yml
    parameters: 
      tag: $(ImageTag)

- stage: provisionEnvironment
  displayName: Provision Environment
  dependsOn: []
  jobs:
  - job: provision
    displayName: 'Create Resource Group'
    pool:
      name: '$(DefaultLinuxPool)'
      vmImage: '$(LinuxVmImage)'
    steps:
    - task: AzurePowerShell@4
      displayName: Provision Resource Group
      inputs:
        azureSubscription: $(ConnectedServiceName)
        azurePowerShellVersion: latestVersion
        ScriptType: inlineScript
        Inline: |
          try
          {
            Get-AzResourceGroup -Name $(ResourceGroupName) | Remove-AzResourceGroup -Verbose -Force
          }
          catch
          {}
          New-AzResourceGroup -Name "$(ResourceGroupName)" -Location "$(ResourceGroupRegion)" -Force

- stage: setupEnvironment
  displayName: Setup Test Environment
  dependsOn:
  - UpdateVersion
  - provisionEnvironment
  jobs:
  - template: ./jobs/cleanup-aad.yml
  - job: setup
    displayName: 'Setup AAD'
    dependsOn:
    - cleanupAad
    pool:
      vmImage: '$(WindowsVmImage)'
    steps:
    - template: ./jobs/add-aad-test-environment.yml

- stage: deployStu3Sql
  displayName: 'Deploy STU3 SQL Site'
  dependsOn:
  - DockerBuild
  - setupEnvironment
  jobs:
  - template: ./jobs/provision-deploy.yml
    parameters: 
      version: Stu3
      sql: true
      webAppName: $(DeploymentEnvironmentNameSql)
      appServicePlanName: $(appServicePlanName)
      appServicePlanResourceGroup: $(appServicePlanResourceGroup)
      subscription: $(ConnectedServiceName)
      resourceGroup: $(ResourceGroupName)
      testEnvironmentUrl: $(TestEnvironmentUrl)
      imageTag: $(ImageTag)
      schemaAutomaticUpdatesEnabled: 'auto'

- stage: deployR4Sql
  displayName: 'Deploy R4 SQL Site'
  dependsOn:
  - DockerBuild
  - setupEnvironment
  jobs:
  - template: ./jobs/provision-deploy.yml
    parameters: 
      version: R4
      sql: true
      webAppName: $(DeploymentEnvironmentNameR4Sql)
      appServicePlanName: $(appServicePlanName)
      appServicePlanResourceGroup: $(appServicePlanResourceGroup)
      subscription: $(ConnectedServiceName)
      resourceGroup: $(ResourceGroupName)
      testEnvironmentUrl: $(TestEnvironmentUrl)
      imageTag: $(ImageTag)
      schemaAutomaticUpdatesEnabled: 'auto'

- stage: deployR5Sql
  displayName: 'Deploy R5 SQL Site'
  dependsOn:
  - DockerBuild
  - setupEnvironment
  jobs:
  - template: ./jobs/provision-deploy.yml
    parameters: 
      version: R5
      sql: true
      webAppName: $(DeploymentEnvironmentNameR5Sql)
      appServicePlanName: $(appServicePlanName)
      appServicePlanResourceGroup: $(appServicePlanResourceGroup)
      subscription: $(ConnectedServiceName)
      resourceGroup: $(ResourceGroupName)
      testEnvironmentUrl: $(TestEnvironmentUrl)
      imageTag: $(ImageTag)
      schemaAutomaticUpdatesEnabled: 'auto'

- stage: testStu3
  displayName: 'Run Stu3 Tests'
  dependsOn:
  - BuildUnitTests
  - setupEnvironment
  - deployStu3Sql
  jobs:
  - template: ./jobs/run-import-tests.yml
    parameters:
      version: Stu3
      keyVaultName: $(DeploymentEnvironmentName)
      appServiceName: $(DeploymentEnvironmentName)

- stage: testR4
  displayName: 'Run R4 Tests'
  dependsOn:
  - BuildUnitTests
  - setupEnvironment
  - deployR4Sql
  jobs:
  - template: ./jobs/run-import-tests.yml
    parameters:
      version: R4
      keyVaultName: $(DeploymentEnvironmentNameR4)
      appServiceName: $(DeploymentEnvironmentNameR4)

- stage: testR5
  displayName: 'Run R5 Tests'
  dependsOn:
  - BuildUnitTests
  - setupEnvironment
  - deployR5Sql
  jobs:
  - template: ./jobs/run-import-tests.yml
    parameters:
      version: R5
      keyVaultName: $(DeploymentEnvironmentNameR5)
      appServiceName: $(DeploymentEnvironmentNameR5)

- stage: cleanup
  displayName: 'Cleanup Azure Environment'
  dependsOn:
  - testStu3
  - testR4
  - testR5
  condition: |
    and
    (
      eq(dependencies.testStu3.result, 'Succeeded'),
      eq(dependencies.testR4.result, 'Succeeded'),
      eq(dependencies.testR5.result, 'Succeeded'),
      in(dependencies.testAksR4Cosmos.result, 'Succeeded', 'Skipped'),
      in(dependencies.testAksR4Sql.result, 'Succeeded', 'Skipped'),
      in(dependencies.testAksR4SqlContainer.result, 'Succeeded', 'Skipped')
    )
  jobs:
  - template: ./jobs/cleanup.yml

